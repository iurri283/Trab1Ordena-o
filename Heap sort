#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <time.h>

void inicializa_vetor_aleatorio (int vet[], int n)
{
    for(int i =0;i < n;i++)
        vet[i] = rand();
}
void inicializa_vetor_crescente (int vet[], int n)
{
    for(int i =0;i < n;i++)
        vet[i] = i;
}
void inicializa_vetor_decrescente (int vet[], int n)
{
    for(int i=0;i < n;i++)
        vet[i] = n-i;
}

void constroiHeap( int *p_vetor, int tamanho, int indice_raiz )
{
 int ramificacao, valor;
 valor = p_vetor[ indice_raiz ];

     while( indice_raiz <= tamanho/2 ){
         ramificacao = 2 * indice_raiz;

         if( ramificacao < tamanho && p_vetor[ ramificacao ] < p_vetor[ ramificacao + 1 ] )
         ramificacao++;

         if( valor >= p_vetor[ ramificacao ] )//Identifica o max-heap
         break;

         p_vetor[ indice_raiz ] = p_vetor[ ramificacao ];
         indice_raiz = ramificacao;
     }
     p_vetor[ indice_raiz ] = valor;
}


void HeapSort( int *p_vetor, int tamanho )
{
     int indice, troca;
     for( indice = tamanho/2; indice >= 0; indice-- )
     constroiHeap( p_vetor, tamanho, indice );

     while( tamanho > 0 )
     {
         troca = p_vetor[ 0 ];
         p_vetor[ 0 ] = p_vetor[ tamanho ];
         p_vetor[ tamanho ] = troca;
         constroiHeap( p_vetor, --tamanho, 0 );
     }

}

int main()
{
    srand(time(NULL));
    int n = 100000;
    int v[n];


    //-------------------VETOR ALEATÃ“RIO------------------
    inicializa_vetor_aleatorio(v,n);

    double inicio, fim, t_percorrido;

    inicio = (double) clock()/CLOCKS_PER_SEC;
    HeapSort(v,n);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado aleatoriamente: %f\n",t_percorrido);


    //-------------------VETOR CRESCENTE------------------

    inicializa_vetor_crescente(v,n);

    inicio = (double) clock()/CLOCKS_PER_SEC;
    HeapSort(v,n);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado crescentemente: %f\n",t_percorrido);

    //-------------------VETOR DECRESCENTE------------------

    inicializa_vetor_decrescente(v,n);

    inicio = (double) clock()/CLOCKS_PER_SEC;
    HeapSort(v,n);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado decrescentemente: %f\n",t_percorrido);


    return 0;
}
