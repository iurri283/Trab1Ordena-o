#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <time.h>

void inicializa_vetor_aleatorio (int vet[], int n)
{
    for(int i =0;i < n;i++)
        vet[i] = rand();
}
void inicializa_vetor_crescente (int vet[], int n)
{
    for(int i =0;i < n;i++)
        vet[i] = i;
}
void inicializa_vetor_decrescente (int vet[], int n)
{
    for(int i=0;i < n;i++)
        vet[i] = n-i;
}

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    /* create temp arrays */
    int L[n1], R[n2];
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    /* Copy the remaining elements of L[], if there
    are any */
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    /* Copy the remaining elements of R[], if there
    are any */
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

int main()
{
    srand(time(NULL));
    int n = 100000;
    int v[n];


    //-------------------VETOR ALEATÃ“RIO------------------
    inicializa_vetor_aleatorio(v,n);

    double inicio, fim, t_percorrido;

    inicio = (double) clock()/CLOCKS_PER_SEC;
    mergeSort(v,0,n-1);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado aleatoriamente: %f\n",t_percorrido);


    //-------------------VETOR CRESCENTE------------------

    inicializa_vetor_crescente(v,n);

    inicio = (double) clock()/CLOCKS_PER_SEC;
    mergeSort(v,0,n-1);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado crescentemente: %f\n",t_percorrido);

    //-------------------VETOR DECRESCENTE------------------

    inicializa_vetor_decrescente(v,n);

    inicio = (double) clock()/CLOCKS_PER_SEC;
    mergeSort(v,0,n-1);
    fim = (double) clock()/CLOCKS_PER_SEC;

    t_percorrido = fim - inicio;
    printf("\nTempo de execucao do vetor ordenado decrescentemente: %f\n",t_percorrido);


    return 0;
}
